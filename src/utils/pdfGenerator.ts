import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { Credential } from '@/types';
import autoTable from 'jspdf-autotable';

/**
 * PDF Generation Options
 */
interface PDFOptions {
  title?: string;
  password?: string; 
  includePasswords?: boolean;
  includeNotes?: boolean;
}

/**
 * Generates and downloads a PDF file with credential data
 * 
 * @param credentials List of credentials to include in PDF
 * @param options Configuration options for PDF generation
 */
export const generatePDF = async (
  credentials: Credential[],
  options: PDFOptions = {}
): Promise<void> => {
  const {
    title = 'BoltPass Credentials',
    password,
    includePasswords = true,
    includeNotes = true
  } = options;

  try {
    // Create PDF document
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });

    // Add title
    doc.setFontSize(20);
    doc.setTextColor(0, 0, 0);
    doc.text(title, 105, 15, { align: 'center' });
    
    // Add creation date
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    const date = new Date().toLocaleString();
    doc.text(`Generated: ${date}`, 105, 22, { align: 'center' });

    // Add security notice if passwords are included
    if (includePasswords) {
      doc.setTextColor(200, 0, 0);
      doc.text('CONFIDENTIAL - Keep this document secure', 105, 28, { align: 'center' });
    }

    // Prepare table data
    const headers = ['Username', includePasswords ? 'Password' : '', includeNotes ? 'Notes' : ''].filter(Boolean);
    
    const rows = credentials.map(cred => {
      const row = [cred.username];
      
      if (includePasswords) {
        row.push(cred.password);
      }
      
      if (includeNotes) {
        row.push(cred.notes || '');
      }
      
      return row;
    });

    // Add table to document - using autoTable plugin for better formatting
    autoTable(doc, {
      head: [headers],
      body: rows,
      startY: 35,
      headStyles: {
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: 'bold',
      },
      alternateRowStyles: {
        fillColor: [240, 240, 240],
      },
      margin: { top: 35 },
      styles: {
        overflow: 'linebreak',
        cellPadding: 3,
        fontSize: 10,
      },
    });

    // Add footer with BoltPass branding
    const pageCount = doc.getNumberOfPages();
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.text(
        'Generated by BoltPass - Secure Password Management',
        105,
        doc.internal.pageSize.height - 10,
        { align: 'center' }
      );
      doc.text(`Page ${i} of ${pageCount}`, 105, doc.internal.pageSize.height - 5, { align: 'center' });
    }

    // Apply password protection if specified
    if (password) {
      try {
        await doc.output('dataurlnewwindow', {
          filename: 'BoltPass-Credentials.pdf',
          encryption: {
            userPassword: password,
            ownerPassword: password,
            userPermissions: ['print', 'copy'],
          },
        });
      } catch (error) {
        console.error('Error with password protection, trying without password:', error);
        // Fallback to non-password protected if browser doesn't support encryption
        doc.save('BoltPass-Credentials.pdf');
      }
    } else {
      doc.save('BoltPass-Credentials.pdf');
    }
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF');
  }
};

// Function to pass when using a PDF export button
export const downloadPDF = (credentials: Credential[], options: PDFOptions = {}) => {
  if (credentials.length === 0) {
    throw new Error('No credentials to export');
  }
  
  return generatePDF(credentials, options);
};
